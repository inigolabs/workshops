schema @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION) @link(url: "https://specs.apollo.dev/link/v1.0") {
	query: Query
}

scalar join__FieldSet
scalar link__Import

enum join__Graph {
	ACCOUNTS @join__graph(name: "accounts", url: "http://localhost:4001/graphql")
	INVENTORY @join__graph(name: "inventory", url: "http://localhost:4004/graphql")
	PRODUCTS @join__graph(name: "products", url: "http://localhost:4003/graphql")
	REVIEWS @join__graph(name: "reviews", url: "http://localhost:4002/graphql")
}
enum link__Purpose {
	"""
	`EXECUTION` features provide metadata necessary for operation execution.
	"""
	EXECUTION
	"""
	`SECURITY` features provide metadata necessary to securely resolve fields.
	"""
	SECURITY
}

type Product @join__type(graph: INVENTORY, key: "upc") @join__type(graph: PRODUCTS, key: "upc") @join__type(graph: REVIEWS, key: "upc") {
	name: String @join__field(graph: PRODUCTS)
	price: Int @join__field(external: true, graph: INVENTORY) @join__field(graph: PRODUCTS)
	reviews: [Review] @join__field(graph: REVIEWS)
	shippingEstimate: Int @join__field(graph: INVENTORY, requires: "price weight") @ratelimit(allowance: 3, period: "1m")
	upc: String!
	warehouseLocation: Int @access(role: ["acme_manager"]) @join__field(graph: INVENTORY)
	weight: Int @join__field(external: true, graph: INVENTORY) @join__field(graph: PRODUCTS)
}
type Query @join__type(graph: ACCOUNTS) @join__type(graph: INVENTORY) @join__type(graph: PRODUCTS) @join__type(graph: REVIEWS) {
	allProducts: [Product] @join__field(graph: PRODUCTS)
	login(id: Int, password: String): User @join__field(graph: ACCOUNTS)
	me: User @join__field(graph: ACCOUNTS)
	topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
}
type Review @join__type(graph: REVIEWS, key: "id") {
	author: User
	body: String
	id: ID!
	product: Product
}
type User @join__type(graph: ACCOUNTS, key: "id") @join__type(graph: REVIEWS, key: "id") {
	id: ID!
	name: String @join__field(graph: ACCOUNTS)
	reviews: [Review] @join__field(graph: REVIEWS)
	username: String
}

directive @access(
	role: [String]
	depth: Int
) on FIELD_DEFINITION

directive @join__field(
	graph: join__Graph!
	requires: join__FieldSet
	provides: join__FieldSet
	type: String
	external: Boolean
	override: String
	usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(
	name: String!
	url: String!
) on ENUM_VALUE

directive @join__implements(
	graph: join__Graph!
	interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
	graph: join__Graph!
	key: join__FieldSet
	extension: Boolean! = false
	resolvable: Boolean! = true
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(
	url: String
	as: String
	for: link__Purpose
	import: [link__Import]
) repeatable on SCHEMA

directive @ratelimit(
	allowance: Int!
	period: String!
	profile: String
) on FIELD_DEFINITION


